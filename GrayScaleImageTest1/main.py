# https://pythonexamples.org/python-convert-hex-to-decimal/
import numpy
import os
import glob
from PIL import Image
from multiprocessing import Pool

path = r"E:\malwaretest\test"
save_path_64 = r"E:\tdkMalwareKepekTest\hatvannegy"
save_path_128 = r"E:\tdkMalwareKepekTest\szazhuszonnyolc"
save_path_256 = r"E:\tdkMalwareKepekTest\kettoszazotvenhat"
save_path_original = r"E:\tdkMalwareKepekTest\original"


def read_bytecode_in(file):
    malwareLinesReaded = []
    malwareLinesSeparated = []
    malwareLinesSeparatedDecimal = []
    with open(file, 'rb') as binary_file:
        while True:
            line = binary_file.readline()
            if not line:
                break
            malwareLine = line[9:-2]
            malwareLinesReaded.append(malwareLine.decode("utf-8"))
    binary_file.close()

    for x in malwareLinesReaded:
        byte = x.split()
        malwareLinesSeparated.append(byte)

    malwareLinesSeparatedDecimal = malwareLinesSeparated
    for x in range(len(malwareLinesSeparatedDecimal)):
        for y in range(len(malwareLinesSeparatedDecimal[x])):
            try:
                malwareLinesSeparatedDecimal[x][y] = int(malwareLinesSeparatedDecimal[x][y], 16)
            except:
                malwareLinesSeparatedDecimal[x][y] = 0

    # making array from [[],[]]
    malwareLinesSeparatedDecimal = numpy.array(malwareLinesSeparatedDecimal[:-1])
    # making the array 1 dimensional
    malwareLinesSeparatedDecimal = malwareLinesSeparatedDecimal.flatten()
    imageWidth = 4000
    padding = len(malwareLinesSeparatedDecimal) % imageWidth

    malwareLinesSeparatedDecimal = numpy.pad(malwareLinesSeparatedDecimal, (0, imageWidth - padding), 'constant', constant_values=(0, 0))
    malwareLinesSeparatedDecimal = malwareLinesSeparatedDecimal.reshape(-1, imageWidth)
    im = Image.fromarray(malwareLinesSeparatedDecimal)
    imResized_64 = im.resize((64, 64))
    imResized_128 = im.resize((128, 128))
    imResized_256 = im.resize((256, 256))

    # name of the picture
    pic_name = os.path.basename(file).split(".")[0]

    if im.mode != 'RGB':
        im = im.convert('RGB')
    im.save(save_path_original + "//" + pic_name + '.png')
    if imResized_64.mode != 'RGB':
        imResized_64 = imResized_64.convert('RGB')
    imResized_64.save(save_path_64 + "\\" + pic_name + '.png')
    if imResized_128.mode != 'RGB':
        imResized_128 = imResized_128.convert('RGB')
    imResized_128.save(save_path_128 + "//" + pic_name + '.png')
    if imResized_256.mode != 'RGB':
        imResized_256 = imResized_256.convert('RGB')
    imResized_256.save(save_path_256 + "//" + pic_name + '.png')


if __name__ == "__main__":
    file_paths = []
    for file in glob.glob(path + "/*"):
        if file.endswith(".bytes"):
            # read_bytecode_in(file)
            file_paths.append(file)

    with Pool(7) as p:
        p.map(read_bytecode_in, file_paths)








# print(malwareLinesSeparatedDecimal)
# # arr = numpy.random.randint(0, 256, 10*10)
# # arr.resize((10,10))
# # print(arr)
# im = Image.fromarray(malwareLinesSeparatedDecimal)
# imResized = im.resize((512, 512))
# im.show()
# imResized.show()
