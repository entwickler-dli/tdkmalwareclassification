#!/usr/bin/env python
# coding: utf-8

# In[1]:


import matplotlib.pyplot as plt
import os
import re
import shutil
import string
import tensorflow as tf

from tensorflow.keras import layers
from tensorflow.keras import losses


# In[2]:


dataset_dir = r"E:\malwaretxttrainclasses"


# In[3]:


os.listdir(dataset_dir)


# In[4]:


train_dir = dataset_dir
sample_file = os.path.join(train_dir, 'Simda/0qjuDC7Rhx9rHkLlItAp.txt')
with open(sample_file) as f:
  print(f.read())


# In[5]:


batch_size = 32
seed = 123


# In[6]:


raw_train_ds = tf.keras.utils.text_dataset_from_directory(
    train_dir, 
    label_mode="categorical",
    batch_size=batch_size, 
    validation_split=0.2, 
    subset='training', 
    seed=seed)


# In[7]:


for text_batch, label_batch in raw_train_ds.take(1):
  for i in range(3):
    print("Review", text_batch.numpy()[i])
    print("Label", label_batch.numpy()[i])


# In[8]:


raw_val_ds = tf.keras.utils.text_dataset_from_directory(
    train_dir, 
    batch_size=batch_size,
    label_mode="categorical",
    validation_split=0.2, 
    subset='validation', 
    seed=seed)


# In[9]:


class_names = raw_train_ds.class_names
print(class_names)
class_names_validation = raw_val_ds.class_names
print(class_names)


# In[10]:


def vectorize_text(text, label):
  text = tf.expand_dims(text, -1)
  return vectorize_layer(text), label


# In[11]:


def custom_standardization(input_data):
  lowercase = tf.strings.lower(input_data)
  stripped_html = tf.strings.regex_replace(lowercase, '\r', ' ')
  stripped_html = tf.strings.regex_replace(lowercase, '\n', ' ')
  return tf.strings.regex_replace(stripped_html,
                                  '[%s]' % re.escape(string.punctuation),
                                  '')


# In[12]:


max_features = 255
sequence_length = 64000

vectorize_layer = layers.TextVectorization(
    standardize=custom_standardization,
    max_tokens=max_features,
    output_mode='int',
    output_sequence_length=sequence_length)


# In[13]:


train_text = raw_train_ds.map(lambda x, y: x)
vectorize_layer.adapt(train_text)
train_text


# In[14]:


text_batch, label_batch = next(iter(raw_train_ds))
first_review, first_label = text_batch[0], label_batch[0]
print("Review", first_review)
# print("Label", raw_train_ds.class_names[first_label])
print("Vectorized review", vectorize_text(first_review, first_label))


# In[15]:


train_ds = raw_train_ds.map(vectorize_text)
val_ds = raw_val_ds.map(vectorize_text)


# In[16]:


AUTOTUNE = tf.data.AUTOTUNE

train_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE)
val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)


# In[17]:


embedding_dim = 64
#embedding_dim = 32


# In[18]:


model = tf.keras.Sequential([
  layers.Embedding(max_features + 1, embedding_dim),
  layers.Dropout(0.2),
  layers.GlobalAveragePooling1D(),
  layers.Dropout(0.2),
  layers.Dense(128, activation="relu"),
  layers.Dense(9, activation="softmax")])

model.summary()


# In[19]:


model.compile(loss=losses.CategoricalCrossentropy(from_logits=False),
              optimizer='adam',
              metrics=['accuracy'])


# In[20]:


list(val_ds.take(1))


# In[21]:


train_labels = tf.concat([y for x, y in train_ds], axis=0)
print(train_labels)


# In[22]:


from sklearn.utils.class_weight import compute_class_weight
import numpy as np
y_integers = np.argmax(train_labels, axis=1)
class_weights = compute_class_weight('balanced', classes=np.unique(y_integers), y=y_integers)
class_weights_dict = dict(enumerate(class_weights))
print(class_weights_dict)


# In[28]:


epochs = 50
history = model.fit(
    train_ds,
    class_weight=class_weights_dict,
    validation_data=val_ds,
    epochs=epochs)


# In[24]:


y_pred = model.predict(val_ds)
y_pred
predicted_categories = tf.argmax(y_pred, axis=1)
predicted_categories
true_categories = tf.concat([y for x, y in val_ds], axis=0)
true_categories = tf.argmax(true_categories, axis=1)
true_categories
from sklearn.metrics import confusion_matrix
cf = confusion_matrix(true_categories, predicted_categories, normalize='true')
cf
import seaborn as sn
import pandas as pd

columns = class_names_validation
table_data = pd.DataFrame(cf, columns, columns)
sn.set(font_scale=1.2)
sn.heatmap(table_data, annot=True, annot_kws={"size": 8}) # font size
plt.xlabel("Predicted class")
plt.ylabel("True class")

plt.show()


# In[25]:


acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(epochs)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()


# In[26]:


tf.keras.utils.plot_model(model, to_file="bytemodell.png", show_shapes=True)

